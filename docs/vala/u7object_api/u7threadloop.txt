Here is a Vala class I created called U7ThreadLoop that supports inter-thread communication:

using Posix; // This *should* work with --pkg posix or libc in meson.build
using GLib;

public static bool U7ThreadLoopIsTesting = false;

public class U7ThreadLoop : U7Object {
    private static Mutex main_lock = Mutex();
    private static U7ThreadLoop main_thread_loop = null;

    private Thread<void*> current_thread;
    private MainContext context;
    private MainLoop loop;
    private AsyncQueue<U7Dictionary> queue;
    private string _name;
    private static uint64 thread_creation_count = 100;
    private bool _is_active;
    private GLib.Mutex mutex;
    private int messageCount;

    public override string get_name() {return _name;}

    public int incrementMessageCount() {
        return ++messageCount;
    }

    public MainContext getThreadContext() {return context;}
    public U7Dictionary try_pop() {
        return queue.try_pop();
    }
    public bool is_active {
        get {
            lock (mutex) {
                return _is_active;
            }
        }
        private set {
            lock (mutex) {
                _is_active = value;
            }
        }
    }

    public MainLoop getThreadLoop() {return loop;}

    public static U7ThreadLoop mainThreadLoop() {
        return main_thread_loop;
    }

    public virtual void threadEntry(U7PropertyList *info) {}
    public virtual void threadSetup() {}


    public override void publishOnThread(string name, U7Dictionary *info) {
        

        //GLib.stdout.printf("Items in queue: %d\n", (int)this.queue.length);  // Prints: "Items in queue: 2"
        this.queue.push(info);


        this.context.invoke(() => {
            this.process_messages();
            return Source.REMOVE;  // Remove this invocation after running
        });


        //GLib.stdout.printf("U7ThreadLoop|publishOnThread|calling %"  + uint64.FORMAT +  "|target %"  + uint64.FORMAT +  "|name %s\n", U7ThreadLoop.getCurrentThreadID(), this.getThreadID(), name);

    }

    public Thread<void*> thread() {
        return current_thread;
    }
    
    public static uint64 getCurrentThreadID() {
        return u7_tls_get_thread_uint64_id();
    }

    public uint64 get_thread_id() {
        return u7_tls_get_thread_uint64_id();
    }

    public static void startMainEventLoop() {
        if (main_thread_loop == null) {

            GLib.stdout.printf("U7ThreadLoop startMainEventLoop()|missing main_thread_loop\n");

        } else {
            main_thread_loop.run();

        }
    }
    private void mainThreadSetup() {

        /*
            Note: Main thread setup does not involve detaching a thread,
                  but the main thread does have a loop, context and an 
                  async queue.
                    
        */
        this.current_thread = Thread.self<void*>();
        this._private_threadEntrySetup();
        this.threadEntrySetup();

        U7NotificationCenter cntr = U7NotificationCenter.default();
        cntr.subscribe("keyboard_input", this);

    }

    public new static void init() {

        u7_tls_set_thread_uint64_id(0);

        //GLib.stdout.printf("U7ThreadLoop init()\n");
        main_thread_loop = new U7MainEventLoop("U7MainThread");
        main_thread_loop.mainThreadSetup();
        
        //GLib.stdout.printf("U7ThreadLoop init()|main_thread_loop %p\n", main_thread_loop);
        //GLib.stdout.printf("U7ThreadLoop main_thread_loop.thread(): %p\n", main_thread_loop.thread());
        //GLib.stdout.printf("U7ThreadLoop main_lock: %p\n", &main_lock);
    }

    public U7ThreadLoop(string name) {
        base();
        _name = name;
        mutex = Mutex();

    }

    construct {

        this.queue = new AsyncQueue<U7Dictionary>();

    }
    
    

    protected bool process_messages() {
        while (queue.length() > 0) {

            U7Dictionary message = queue.try_pop();

            bool log_message = false;

            if (log_message) {
                string json = message.to_json_string();
                GLib.stdout.printf("%s|calling %" + uint64.FORMAT + "|target %" + uint64.FORMAT + "|process_messages: %s\n", this.get_name(), U7ThreadLoop.getCurrentThreadID(), this.getThreadID(), json);
            }


            if (message != null) {

                if (message.value.has_key("publication_name")) {
                    string notification_name = ((U7String)message.value["publication_name"]).to_string();
                    if (log_message)
                        GLib.stdout.printf("U7ThreadLoop [%s]: Processing notification: %s\n", this.get_name(), notification_name);
                    this.invoke_method(notification_name, message, false);
                } else {
                    if (log_message)
                        GLib.stdout.printf("U7ThreadLoop [%s]: missing publication_name\n", this.get_name());


                }
            }
        }
        return true; // Keep the source active
    }

    private void _private_threadEntrySetup() {

        this.recordThreadID();
        this.current_thread = Thread.self<void*>();
        //GLib.stdout.printf("U7ThreadLoop [%s]: _private_threadEntrySetup\n", this.get_name());

    }
    
    // Update threadEntrySetup to use the new source creation
    public virtual void threadEntrySetup() {

        this.context = new MainContext();
        this.context.push_thread_default();
        // Create and run a MainLoop for this thread
        this.loop = new MainLoop(this.context, false);


        // Use an Idle source to process the queue when the loop is idle

        GLib.stdout.printf("U7ThreadLoop [%s]: threadEntrySetup\n", this.get_name());
    }


    public virtual void run() {

/*
        Timeout.add(1000, () => {
            GLib.stdout.printf("Event triggered in separate thread!\n");
            return true; // Return true to keep the timeout running
        });

*/      this.loop.run();
        bool loop_exists = (this.loop != null) ? true : false;
        GLib.stdout.printf("U7ThreadLoop [%s]: Starting loop [%i]\n", this.get_name(), (int)loop_exists);
    

    }

    public void recordThreadID() {
        
        this.setExtras(new U7ObjectExtras());

        main_lock.lock();
        uint64 next_id = thread_creation_count++;
        u7_tls_set_thread_uint64_id(next_id);
        this.setThreadID(next_id);
        U7NotificationCenter.registerThreadDispatcher(this);
        main_lock.unlock();

        //GLib.stdout.printf("U7ThreadLoop [%s]: ID: %" + uint64.FORMAT + "\n", this.get_name(), next_id);

    }

    private static void add_timeout_check(U7ThreadLoop tl) {
        Source timeout_source = new TimeoutSource(100);
        timeout_source.set_callback(() => {
            GLib.stdout.printf("ThreadExample[%" + uint64.FORMAT + "]|thread_func() check\n", 
                            U7ThreadLoop.getCurrentThreadID());
            return Source.CONTINUE;
        });
        timeout_source.attach(tl.context);


    }
    private static void* thread_func(void* user_data) {
        U7ThreadLoop self = (U7ThreadLoop)user_data;

        //GLib.stdout.printf("thread_func: %p\n", user_data);

        self._private_threadEntrySetup();

        // Queue is already initialized in the constructor
        // Add message processing timeout source
        
        self.threadEntrySetup();
        
        // Set up a source to check the queue
        if (U7ThreadLoopIsTesting)
            add_timeout_check(self);

        //GLib.stdout.printf("U7ThreadLoop [%s]: Thread started\n", self.get_name());
        self.run();
        //GLib.stdout.printf("U7ThreadLoop [%s]: Loop stopped\n", self.get_name());
        self.context.pop_thread_default();

        return null;
    }

    public void start() {
        if (current_thread != null) {
            return;
        }

        try {
            new Thread<void*>.try(this.get_name(), () => {
                return thread_func(this);
            });
        } catch (GLib.Error e) {
            GLib.stdout.printf("Failed to start thread '%s': %s\n", this.get_name(), e.message);
            current_thread = null;
        }
    }

    public override string to_string() {
        return @"U7ThreadLoop [$(this.get_name())] (id: $(this.uuid()))";
    }
}

public class U7KeyboardInputMonitor : U7ThreadLoop {
    public U7KeyboardInputMonitor(string name) {
        base(name);
    }
    

    public override void threadEntrySetup() {
    
        GLib.stdout.printf("U7KeyboardInputMonitor [%s]: threadEntrySetup\n", this.get_name());

    }

    public override void run() {
        GLib.stdout.printf("U7KeyboardInputMonitor [%s]: Starting input monitor\n", this.get_name());
        GLib.stdout.flush();
        int sleep_count = 0;
        while (true) {
            char buffer[1024];
            ssize_t bytes = Posix.read(0, buffer, buffer.length);

            U7Dictionary message = this.try_pop();
            if (message != null)
                this.incrementMessageCount();

            if (bytes > 0) {

                GLib.stdout.printf("bytes %i|last 0x%02x|equal %i\n", (int)bytes, buffer[bytes - 1], (int)(buffer[bytes - 1] == 0x0a));

                if (buffer[bytes] == 0x0a)
                    bytes--;
                if (bytes > 0) {
                    buffer[bytes - 1] = 0;
                    string input = (string)buffer[0:bytes];
                    U7Dictionary info = U7Dictionary.with_pairs("input", new U7String(input), null);
                    U7NotificationCenter cntr = U7NotificationCenter.default();
                    if (cntr != null) {
                        if (input == "asdf") 
                            cntr.publish("keyboard_input_asdf", info);
                        else 
                            cntr.publish("keyboard_input", info);

                    }
    
    
                }
                
                GLib.stdout.flush();
            } else if (bytes == 0) {
                GLib.stdout.printf("U7KeyboardInputMonitor [%s]: EOF detected\n", this.get_name());
                break;
            } else {
                if (Posix.errno == Posix.EAGAIN || Posix.errno == Posix.EWOULDBLOCK) {
                    Thread.usleep(100000); // 100ms delay for non-blocking stdin
                    sleep_count++;
                    continue;
                } else {
                    GLib.stderr.printf("U7KeyboardInputMonitor [%s]: Read error: %s\n", 
                                       this.get_name(), Posix.strerror(Posix.errno));
                    break;
                }
            }
        }
    }

    public override string to_string() {
        return @"U7KeyboardInputMonitor (thread: $(this.get_name()))";
    }
}



public class U7ThreadSubscriber : U7ThreadLoop {

    private static U7ThreadSubscriber test_subscriber;
    public U7ThreadSubscriber(string name) {
        base(name);


    }

    public override void threadEntrySetup() {

        base.threadEntrySetup();

        subscribe("keyboard_output_request", (self, arg) => {
            string input = U7Utility.getStringFromDictionaryForKey(arg, "input");
            GLib.stdout.printf("U7ThreadSubscriber|thread_id %" + uint64.FORMAT + "|keyboard_output_request: %s\n", self.getThreadID(), input);
        });
        subscribe("keyboard_input", (self, arg) => {
            string input = U7Utility.getStringFromDictionaryForKey(arg, "input");
            GLib.stdout.printf("U7ThreadSubscriber|thread_id %" + uint64.FORMAT + "|keyboard_input: %s\n", self.getThreadID(), input);
        });
        subscribe("tcp_data_received", (self, arg) => {
            string message = U7Utility.getStringFromDictionaryForKey(arg, "message");
            GLib.stdout.printf("U7ThreadSubscriber|thread_id %" + uint64.FORMAT + "|tcp_data_received: %s\n", self.getThreadID(), message);
        });
        subscribe("websocket_message", (self, arg) => {
            string message = U7Utility.getStringFromDictionaryForKey(arg, "message");
            GLib.stdout.printf("U7ThreadSubscriber|thread_id %" + uint64.FORMAT + "|websocket_message: %s\n", self.getThreadID(), message);
        });


    }

    public override string to_string() {
        return @"U7ThreadSubscriber (thread: $(this.get_name()))";
    }

    public static void test() {
        test_subscriber = new U7ThreadSubscriber("U7ThreadSubscriber");        
        test_subscriber.start();
        //GLib.stdout.printf("U7ThreadSubscriber init() [%s]\n", test_subscriber.to_string());
    }
}

Go over all the details of this class and give me a detailed overview of this class. Talk about all the features of the class that supports safe inter-thread communication. Go into detail all the steps to setup the thread's own run loop and the thread's own "MainContext" for proper AsyncQueue operation. Talk about why an AsyncQueue is needed for inter-thread communication. I create a class that acts as a pub/sub for passing messages between threads. Each U7ThreadLoop object registers with the default U7NotificationCenter object so the center can dispatch publication requests to all thread loop objects that have registered for dispatching messages to subscribers owned by the thread loop. 

Please provide an HTML document of this class overview (raw plain text) in a code snippet, the contents of the document should be organized in the style of an actual textbook chapter with the intended audience being someone wanting to learn how to do something for the first time. You can keep the style conversational since most of the contents of this discussion is at its heart a conversation, but try to make the tone more toward anyone and not a particular person asking questions. Don't make the conversational tone overly corny, just a notch below professional. Do not generate Chapter/Section numbers. Format the HTML document to approximate the rich text rendering of a nice webpage. Include proper HTML tags for headings, bold text, lists, inline code, code blocks, tables, and styled links, with CSS to mimic a modern web UI (system fonts, subtle colors, readable layout). For any code blocks (pre tags), include a functional 'Copy' button in the top-right corner, using JavaScript with the navigator.clipboard API and a fallback for older browsers, styled to match the UI. The 'Copy' button is only to copy the plain text contents of the code snippet. Make the &lt;pre&gt; background-color match the &lt;code&gt; background-color (use #e5e5e5). Make the text color for h2, h3... #1557a0. Make the text color for h1 #white. Create a CSS style for a title header aread and make the "header" style background color #1557a0. Make the first element in the body <nav><a href="./index.html">Home</a></nav>. Keep the color palette darker tones for text colors, but make the document background color white. Don't create a dark mode document. Ensure the response is a valid HTML document. When including code snippets (e.g., within <pre> or <code> tags), the plain text content must be valid HTML with special characters escaped—e.g., use &lt; for <, &gt; for >, and &amp; for &. This applies especially to text within <p> tags shown as examples in these snippets. The style should be for a general audience and the tone of the output should not be directed toward me.


Use this copy-button implementation for the code snippet copy button. 


            <div class="code-block">
                <button class="copy-button">Copy</button>
                <pre><code>// A basic Vala program
public class HelloWorld {
    public static void main(string[] args) {
        stdout.printf("Hello, Vala World!\n");
    }
}</code></pre>
            </div>



    <script>
        document.querySelectorAll('.copy-button').forEach(button => {
            button.addEventListener('click', () => {
                const code = button.nextElementSibling.querySelector('code').textContent;
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(code).then(() => {
                        alert('Code copied to clipboard!');
                    }).catch(err => {
                        console.error('Failed to copy: ', err);
                    });
                } else {
                    // Fallback for older browsers
                    const textarea = document.createElement('textarea');
                    textarea.value = code;
                    document.body.appendChild(textarea);
                    textarea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textarea);
                    alert('Code copied to clipboard!');
                }
            });
        });
    </script>


Use this CSS as a starting point:

        body {
            font-family: system-ui, -apple-system, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .header {
            background-color: #1557a0;
            padding: 20px;
            border-radius: 8px 8px 0 0;
            margin-bottom: 20px;
            display: flex;           /* Use flexbox */
            align-items: center;     /* Vertically center items */
        }
        h1 {
            color: white;
            margin: 0;
            font-size: 2.5em;
            flex-grow: 1;           /* Take up available space */
            text-align: center;     /* Center the text */
        }


        nav {
            padding: 0;
            order: -1; /* Places nav on the left */
        }

        nav a {
            color: white;
            text-decoration: none;
            font-weight: bold;
        }

        nav a:hover {
            text-decoration: underline;
        }


        .subsection {
            margin: 0 auto 30px;
            padding: 1px;              /* Adds padding inside the subsection */
        }
        .subsection h3 {
            color: #1557a0;
            margin-top: 0;
        }

        main {
            max-width: 800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        .code-block {
            position: relative;
            background-color: #e5e5e5;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        .copy-button {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background-color: #1557a0;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
        }
        pre {
            background-color: #e5e5e5;
            padding: 1rem;
            border-radius: 4px;
            overflow-x: auto;
        }
        code {
            font-family: 'Courier New', Courier, monospace;
        }
        footer {
            text-align: center;
            padding: 1rem;
            background-color: #1557a0;
            color: white;
            margin-top: 2rem;
        }
        a {
            color: #1557a0;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
